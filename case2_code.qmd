---
title: "STA 440 Case 2: Code Script"
author: "Olivia Fu, Christina Lee, Eunice Lee"
format: pdf
editor: visual
---

## Package Import & Data Cleaning

```{r}
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
```

```{r load-data}
data <- read_csv("JO2.csv", col_names = FALSE, show_col_types = FALSE)
```

```{r clean-data}
# extract substrate and dose
substrate  <- as.character(data[1, ])
dose  <- as.character(data[2, ])

# fill in substrate for each column
substrate <- trimws(sub("\\s*\\(.*\\)$", "", substrate))
substrate <- na_if(substrate, "")
substrate <- na_if(substrate, "NA")
substrate <- fill(tibble(Substrate = substrate),
                         Substrate, .direction = "down")$Substrate

# build new column names
new_names <- ifelse(tolower(dose) == "subject", "Subject",
                    paste0(substrate, ".", dose))
data <- data[-c(1,2), ]
names(data) <- make.unique(new_names, sep = "_")

# solve type issue
val_cols <- setdiff(names(data), "Subject")
data[val_cols] <- lapply(data[val_cols], function(x) {
  if (is.character(x)) parse_number(x) else as.numeric(x)
})

# make the longer table
data_cleaned <- data |>
  pivot_longer(
    cols = -Subject,
    names_to     = c("substrate", "dose"),
    names_pattern = "^([^.]+)\\.(.+)$",       # split once at first dot
    values_to    = "Value"
) |>
  mutate(
    group = ifelse(grepl("^NT", Subject, ignore.case=TRUE), "NT", "Tg")
  )

# drop 28 observations because of 20 NA values
# data_cleaned <- data_cleaned |>
  # filter(!(Subject %in% c("NT6", "Tg6") & substrate %in% c("OcM", "PcM")))
```

## Exploratory Data Analysis

### **Trend Exploration & Visualization**

```{r}
data_plot <- data_cleaned |>
  # don't include basal in the plot
  filter(dose != "Basal") |>
  # treat dose as continuous numeric values
  mutate(dose = as.numeric(dose))
```

```{r}
ggplot(data_plot, aes(dose, Value,
                      group = interaction(Subject, substrate),
                      color = group)) +
  geom_line(alpha = 0.35) +
  geom_point(alpha = 0.7, size = 1.8) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]), y = "JO2") +
  scale_x_continuous(
    breaks = c(-14.49, -14.36, -14.19, -13.95, -13.65, -12.95)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# calculate mean and se for each group
sum_df <- data_plot |>
  group_by(substrate, group, dose) |>
  summarise(mean = mean(Value, na.rm = TRUE),
            se   = sd(Value, na.rm = TRUE) / sqrt(sum(!is.na(Value))),
            .groups = "drop")
```

```{r}
ggplot(sum_df, aes(dose, mean, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean - se, 
                    ymax = mean + se), 
                width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]),
       y = "JO2 (mean +- SE)") +
  scale_x_continuous(
    breaks = c(-14.49, -14.36, -14.19, -13.95, -13.65, -12.95)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# treat dose as ordered categorical levels
dose_levels <- c("-14.49","-14.36","-14.19","-13.95","-13.65","-12.95")

data_plot_ordinal <- data_cleaned |>
  # don't include basal in the plot
  filter(dose != "Basal") |>
  # treat dose as continuous numeric values
  # mutate(dose = as.numeric(dose))
  mutate(dose = factor(dose, levels = dose_levels, ordered = TRUE))

ggplot(data_plot_ordinal, aes(dose, Value,
                              group = interaction(Subject, substrate),
                              color = group)) +
  geom_line(alpha = 0.35) +
  geom_point(alpha = 0.7, size = 1.8) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]), y = "JO2") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# calculate mean and se for each group
sum_df_ordinal <- data_plot_ordinal |>
  group_by(substrate, group, dose) |>
  summarise(mean = mean(Value, na.rm = TRUE),
            se   = sd(Value, na.rm = TRUE) / sqrt(sum(!is.na(Value))),
            .groups = "drop")

ggplot(sum_df_ordinal, aes(dose, mean, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean - se, 
                    ymax = mean + se), 
                width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]),
       y = "JO2 (mean +- SE)") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**Incorporating basal levels**

```{r}
# plot Basal as a starting point
# pick a numeric location for Basal
min_dose <- min(as.numeric(sum_df$dose[sum_df$dose != "Basal"]), na.rm = TRUE)
basal_pos <- min_dose - 0.5

# numeric x for plotting
sum_df_basal <- data_cleaned |>
  group_by(substrate, group, dose) |>
  summarise(mean = mean(Value, na.rm = TRUE),
            se = sd(Value, na.rm = TRUE)/sqrt(sum(!is.na(Value))),
            .groups = "drop") |>
  mutate(dose_num = ifelse(dose == "Basal", basal_pos, as.numeric(dose)))

ggplot(sum_df_basal, aes(dose_num, mean, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]), y = "JO2 (mean +- SE)") +
  scale_x_continuous(
    breaks = c(basal_pos, -14.49, -14.36, -14.19, -13.95, -13.65, -12.95),
    labels = c("Basal",  "-14.49","-14.36","-14.19","-13.95","-13.65","-12.95")
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# get Basal per Subject × Substrate
basal <- data_cleaned |>
  filter(dose == "Basal") |>
  select(Subject, substrate, Basal = Value)

# join and compute normalized metrics
data_norm <- data_plot |>
  left_join(basal, by = c("Subject","substrate")) |>
  mutate(
    delta  = Value - Basal,
    pct    = 100 * (Value / Basal - 1),
    log2FC = log2(Value / Basal)
)
```

```{r}
# summarize by Group × Substrate × Dose
# experiment with different methods to incorporate Basal
sum_df2 <- data_norm |>
  group_by(substrate, group, dose) |>
  summarise(
    mean_delta = mean(delta, na.rm = TRUE),
    se_delta = sd(delta, na.rm = TRUE) / sqrt(sum(!is.na(Value))),
    mean_pct = mean(pct, na.rm = TRUE),
    se_pct   = sd(pct, na.rm = TRUE) / sqrt(sum(!is.na(Value))),
    mean_log2FC = mean(log2FC, na.rm = TRUE),
    se_log2FC = sd(log2FC, na.rm = TRUE) / sqrt(sum(!is.na(Value))),
    .groups = "drop"
  )
```

```{r}
# delta
ggplot(sum_df2, aes(dose, mean_delta, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean_delta - se_delta, 
                    ymax = mean_delta + se_delta),
                width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]),
       y = "change from Basal (mean +- SE)",
       color = "group") +
  scale_x_continuous(
    breaks = c(-14.49, -14.36, -14.19, -13.95, -13.65, -12.95)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# % of change
ggplot(sum_df2, aes(dose, mean_pct, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean_pct - se_pct, 
                    ymax = mean_pct + se_pct),
                width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]),
       y = "% change vs Basal (mean +- SE)",
       color = "group") +
  scale_x_continuous(
    breaks = c(-14.49, -14.36, -14.19, -13.95, -13.65, -12.95)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# log2 fold change
ggplot(sum_df2, aes(dose, mean_log2FC, color = group, group = group)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean_log2FC - se_log2FC, 
                    ymax = mean_log2FC + se_log2FC),
                width = 0.12) +
  facet_wrap(~ substrate) +
  labs(x = expression(Delta*G[ATP]),
       y = "log2 fold-change vs Basal (mean +- SE)",
       color = "group") +
  scale_x_continuous(
    breaks = c(-14.49, -14.36, -14.19, -13.95, -13.65, -12.95)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### **Model Fitting & Testing**

```{r}
# data frame for LME
library(dplyr)

dose_levels <- c("-14.49","-14.36","-14.19","-13.95","-13.65","-12.95")

data_lme <- data_cleaned %>%
  # exclude basal for modeling
  filter(dose != "Basal") %>%
  mutate(group = factor(group, levels = c("NT","Tg")),
         substrate = factor(substrate),
         dose = factor(dose, levels = dose_levels, ordered = TRUE),
    dose_num  = as.numeric(dose),
    Subject = factor(Subject)
  )
```

```{r}
# linear mixed effects model: all possible interaction terms
library(lme4)

lme_all <- lmer(
  Value ~ group * substrate * dose + (1 + dose_num | Subject),
  data = data_lme,
  REML = TRUE,
  control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5))
)

summary(lme_all)
```

```{r}
# exclude higher-order polynomial terms for dose from model above
data_lme_L <- data_lme %>%
  mutate(dose_num  = as.numeric(as.character(dose)),
         dose_numc = scale(dose_num, center = TRUE, scale = FALSE))

lme_all_L <- lmer(
  Value ~ group * substrate * dose_numc + (1 + dose_num | Subject),
  data = data_lme_L,
  REML = TRUE,
  control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5))
)

summary(lme_all_L)
```

\*\* Model Comparison \*\*

```{r}
install.packages("MuMIn")
library(MuMIn)   
library(knitr)  
library(dplyr)

# this one individually calculates RMSE
cv_rmse <- function(model, data, k = 5) {
  set.seed(123)
  folds <- sample(rep(1:k, length.out = nrow(data)))
  rmses <- numeric(k)

  for (i in 1:k) {
    train <- data[folds != i, ]
    test  <- data[folds == i, ]

    # Refit model on training set
    fit <- tryCatch(update(model, data = train), error = function(e) NULL)
    if (is.null(fit)) {
      rmses[i] <- NA
      next
    }

    # Force factor levels in test to match training
    for (col in names(train)) {
      if (is.factor(train[[col]])) {
        test[[col]] <- factor(test[[col]], levels = levels(train[[col]]))
      }
    }

    # Predict safely
    pred <- tryCatch(
      predict(fit, newdata = test, allow.new.levels = TRUE),
      error = function(e) rep(NA, nrow(test))
    )

    # Compute RMSE if predictions succeeded
    if (all(is.na(pred))) {
      rmses[i] <- NA
    } else {
      rmses[i] <- sqrt(mean((test$Value - pred)^2, na.rm = TRUE))
    }
  }

  mean(rmses, na.rm = TRUE)
}

# calculating metrics
model_metrics <- function(model, data, name) {
  r2 <- suppressWarnings(r.squaredGLMM(model))
  rmse <- tryCatch(cv_rmse(model, data), error = function(e) NA)
  data.frame(
    Model          = name,
    AIC            = AIC(model),
    BIC            = BIC(model),
    Marginal_R2    = r2[1],
    Conditional_R2 = r2[2],
    CV_RMSE        = rmse
  )
}

results_all <- model_metrics(lme_all, data_lme, "data_lme")
results_lin <- model_metrics(lme_all_L, data_lme_L, "data_lme_L")

results <- bind_rows(results_all, results_lin) |>
  mutate(
    dAIC = AIC - min(AIC),
    dBIC = BIC - min(BIC)
  )

kable(results, digits = 3, caption = "Model Comparison with Cross-Validated RMSE")
```

```{r}
# residual and QQ plots
par(mfrow=c(2,2))

# lme_all
plot(fitted(lme_all), resid(lme_all), main="lme_all residuals")
qqnorm(resid(lme_all)); qqline(resid(lme_all))

# lme_all_L
plot(fitted(lme_all_L), resid(lme_all_L), main="lme_all_L residuals")
qqnorm(resid(lme_all_L)); qqline(resid(lme_all_L))
```
